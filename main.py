from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import json
import asyncio

from aiogram.types import ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types.web_app_info import WebAppInfo
from dotenv import load_dotenv
import os
from aiogram import types
from aiogram import executor
import sqlite3 as sq
import re

load_dotenv()
bot = Bot(token=os.getenv('TOKEN_BOT'))
dp = Dispatcher(bot, storage=MemoryStorage())

# ADMIN_CHAT_ID = "5521511837"
# ADMIN_CHAT_ID = "674501380"
# ADMIN_CHAT_ID_Samsung = "-4244628531"
# ADMIN_CHAT_ID_RE_STORE = "-4200438125"
# ADMIN_CHAT_ID_XIAOMI = "-4211717137"

BRANDS = {
    "restore":
        "-4200438125",
    "samsung":
        "-4244628531",
    "xiaomi":
        "-4211717137"
}

base = sq.connect('data.db')
cur = base.cursor()

cur.execute("CREATE TABLE IF NOT EXISTS files(message_id TEXT PRIMARY KEY, user_id INTEGER, photo_id TEXT)")
cur.execute("CREATE TABLE IF NOT EXISTS admins(user_id INTEGER PRIMARY KEY, brand TEXT )")
cur.execute("CREATE TABLE IF NOT EXISTS curent_chat(user_id INTEGER PRIMARY KEY, chat TEXT )")
base.commit()


@dp.message_handler(commands="start")
async def start(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –∑–∞–ø—Ä–æ—Å–∞",
                                    web_app=WebAppInfo(
                                        url=f"https://perevyazko1.github.io/bot-acc-front")))
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name} –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üëá',
                         reply_markup=markup)
@dp.message_handler(commands="info")
async def start(message: types.Message):
    await message.answer(f'ü§ñ –ë–æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤, –≤ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É re:store, xiaomi, samsung.\n\n'
f'–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏, –≤—ã–±–µ—Ä–∏ –≤ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥—É "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∞–∫—Å–µ—Å—Å—É–∞—Ä" \n\n'

"üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: –ê–Ω–¥—Ä–µ–π –ü–µ—Ä–µ–≤—è–∑–∫–æ\n\n"
"üì≤ TG: @perevyazko1"
                         )
@dp.callback_query_handler(lambda c: c.data in ['restore', 'xiaomi', 'samsung'])
async def process_callback(callback_query: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_query
    brand = callback_query.data
    user_id = callback_query.from_user.id
    cur.execute("INSERT INTO admins (user_id, brand) VALUES (?, ?)", (user_id, brand))
    base.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–æ–º –≤ –±—Ä—ç–Ω–¥–µ: {brand}")
    await bot.delete_message(chat_id=callback_query.message.chat.id,
                             message_id=callback_query.message.message_id)


@dp.message_handler(commands="send_form")
async def send_form(message: types.Message):
    user_id = message.from_user.id
    cur.execute("DELETE  FROM curent_chat WHERE user_id = ?", (user_id,))
    base.commit()
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω —Ç–æ–≤–∞—Ä–∞.")


@dp.message_handler(content_types=['web_app_data'])
async def web_app(message: types.Message):
    data_form = json.loads(message.web_app_data.data)

    send_form_text = (
        f"–ë—Ä–µ–Ω–¥: {data_form['brand']} \n\n"
        f"–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞  {data_form['name']} \n\n"
        f"–ú–∞–≥–∞–∑–∏–Ω: {data_form['store']} \n\n"
        f"–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä : {data_form['reference']}\n\n"
        f"–û —Ç–æ–≤–∞—Ä–µ:\n\n {data_form['about']} ")
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É

    if data_form['user_id'] != "":
        user_id = data_form['user_id']
        photo_id = data_form['photo']
        message = await bot.send_photo(chat_id=data_form['chat_group_id'], photo=data_form['photo'],
                                       caption=send_form_text)
        cur.execute("INSERT INTO files (message_id, user_id, photo_id) VALUES (?, ?, ?)",
                    (message.message_id, user_id, photo_id))
        cur.execute("INSERT OR REPLACE INTO curent_chat (user_id, chat) VALUES (?, ?)",
                    (user_id, data_form['chat_group_id']))

        base.commit()

        sent_message = await bot.send_message(chat_id=user_id,
                                              text="–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å —Ç–æ–±–æ–π —Å–≤—è–∂—É—Ç—Å—è")
        # await asyncio.sleep(10)
        # await bot.delete_message(chat_id=message.chat.id, message_id=sent_message.message_id)


    else:
        await bot.send_message(chat_id=data_form['chat_group_id'], text=send_form_text)


# -------------–ó–∞—â–∏—Ç–∞ –æ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Ñ–æ—Ç–æ –≤ —á–∞—Ç–µ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –Ω–∏–∫–æ–º—É –Ω–µ –ø—Ä–∏–¥—É—Ç--------------
@dp.message_handler(content_types=types.ContentTypes.PHOTO, is_reply=False,
                    chat_id=[BRANDS.get("xiaomi"), BRANDS.get("samsung"), BRANDS.get("restore")],
                    )
async def photo_in_chat_admins(message: types.Message):
    await message.answer("–ß—Ç–æ–±—ã –≤—ã—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ, –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")


# -------------–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Ñ–æ—Ç–æ –ø—Ä–æ–¥–∞–≤—Ü—É--------------
@dp.message_handler(content_types=types.ContentTypes.PHOTO, is_reply=True,
                    chat_id=[BRANDS.get("xiaomi"), BRANDS.get("samsung"), BRANDS.get("restore")],
                    )
async def reply_to_user(message: types.Message):
    if message.from_user.id == message.reply_to_message.from_user.id:
        await message.answer("–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç, –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ "
                             "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    if message.reply_to_message.text:
        match = re.search(r'id\((\d+)\)', message.reply_to_message.text)
        admin_message = message.text
        photo_id = message.photo[-1].file_id  # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–π –∫—Ä—É–ø–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Ñ–æ—Ç–æ
        if match:
            await bot.send_photo(chat_id=match.group(1), photo=photo_id,
                                 caption=f"–§–æ—Ç–æ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {message.chat.title}\n{admin_message}")
        else:
            await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.")
    elif message.reply_to_message.caption:
        match = re.search(r'id\((\d+)\)', message.reply_to_message.caption)
        admin_message = message.text
        photo_id = message.photo[-1].file_id  # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–π –∫—Ä—É–ø–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Ñ–æ—Ç–æ
        if match:
            await bot.send_photo(chat_id=match.group(1), photo=photo_id,
                                 caption=f"–§–æ—Ç–æ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {message.chat.title}\n{admin_message}")
        else:
            current_message = message.reply_to_message.message_id
            cur.execute("SELECT user_id FROM files WHERE message_id = ?", (current_message,))
            result = cur.fetchone()
            admin_message = message.text
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if result:
                user_id = result[0]
                await bot.send_photo(chat_id=user_id, photo=photo_id,
                                     caption=f"–í–∏–¥–µ–æ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {message.chat.title}\n{admin_message}")
            elif result is None:
                await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.")


# -------------–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Ñ–æ—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º--------------
@dp.message_handler(content_types=types.ContentTypes.PHOTO)
async def reply_to_manager(message: types.Message):
    user_id = message.from_user.id
    cur.execute("SELECT chat FROM curent_chat WHERE user_id = ?", (user_id,))
    result = cur.fetchone()
    user_message = message.text
    if result:
        current_chat = result[0]
        photo_id = message.photo[-1].file_id  # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–π –∫—Ä—É–ø–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Ñ–æ—Ç–æ
        await bot.send_photo(chat_id=current_chat, photo=photo_id,
                             caption=f"–§–æ—Ç–æ –æ—Ç id({message.from_user.id}) {message.from_user.first_name}:\n{user_message}")
    elif result is None:
        photo_id = message.photo[-1].file_id  # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–π –∫—Ä—É–ø–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        user_id = message.from_user.id
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –∑–∞–ø—Ä–æ—Å–∞",
                                        web_app=WebAppInfo(
                                            url=f"https://perevyazko1.github.io/bot-acc-front#{user_id}/{photo_id}")))
        sent_message = await message.answer(f'–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã üëá',
                                            reply_markup=markup)
        await asyncio.sleep(10)
        await bot.delete_message(chat_id=message.chat.id, message_id=sent_message.message_id)

    else:
        await message.answer("–ß—Ç–æ–±—ã –æ–±—â–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º, –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –≤—ã—Å–ª–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞.")


# -------------–ó–∞—â–∏—Ç–∞ –æ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –≤–∏–¥–µ–æ –≤ —á–∞—Ç–µ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –Ω–∏–∫–æ–º—É –Ω–µ –ø—Ä–∏–¥—É—Ç--------------
@dp.message_handler(content_types=types.ContentTypes.VIDEO, is_reply=False,
                    chat_id=[BRANDS.get("xiaomi"), BRANDS.get("samsung"), BRANDS.get("restore")],
                    )
async def video_in_chat_admins(message: types.Message):
    await message.answer("–ß—Ç–æ–±—ã –≤—ã—Å–ª–∞—Ç—å –≤–∏–¥–µ–æ, –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")


# -------------–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤–∏–¥–µ–æ –ø—Ä–æ–¥–∞–≤—Ü—É--------------
@dp.message_handler(content_types=types.ContentTypes.VIDEO, is_reply=True,
                    chat_id=[BRANDS.get("xiaomi"), BRANDS.get("samsung"), BRANDS.get("restore")],
                    )
async def reply_to_user(message: types.Message):
    if message.from_user.id == message.reply_to_message.from_user.id:
        await message.answer("–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç, –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ "
                             "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    if message.reply_to_message.text:
        match = re.search(r'id\((\d+)\)', message.reply_to_message.text)
        admin_message = message.text
        video_id = message.video.file_id  # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–π –∫—Ä—É–ø–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –≤–∏–¥–µ–æ
        if match:
            await bot.send_video(chat_id=match.group(1), video=video_id,
                                 caption=f"–í–∏–¥–µ–æ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {message.chat.title}\n{admin_message}")
        else:
            await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.")
    elif message.reply_to_message.caption:
        match = re.search(r'id\((\d+)\)', message.reply_to_message.caption)
        admin_message = message.text
        video_id = message.video.file_id  # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–π –∫—Ä—É–ø–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –≤–∏–¥–µ–æ
        if match:
            await bot.send_video(chat_id=match.group(1), video=video_id,
                                 caption=f"–í–∏–¥–µ–æ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {message.chat.title}\n{admin_message}")
        else:
            current_message = message.reply_to_message.message_id
            cur.execute("SELECT user_id FROM files WHERE message_id = ?", (current_message,))
            result = cur.fetchone()
            admin_message = message.text
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if result:
                user_id = result[0]
                await bot.send_video(chat_id=user_id, video=video_id,
                                     caption=f"–í–∏–¥–µ–æ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {message.chat.title}\n{admin_message}")
            elif result is None:
                await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.")


# -------------–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤–∏–¥–µ–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º--------------
@dp.message_handler(content_types=types.ContentTypes.VIDEO)
async def reply_to_manager(message: types.Message):
    user_id = message.from_user.id
    cur.execute("SELECT chat FROM curent_chat WHERE user_id = ?", (user_id,))
    result = cur.fetchone()

    user_message = message.text
    if result:
        current_chat = result[0]
        video_id = message.video.file_id  # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–π –∫—Ä—É–ø–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –≤–∏–¥–µ–æ
        await bot.send_video(chat_id=current_chat, video=video_id,
                             caption=f"–í–∏–¥–µ–æ –æ—Ç id({message.from_user.id}) {message.from_user.first_name}:\n{user_message}")
    else:
        await message.answer("–ß—Ç–æ–±—ã –æ–±—â–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º, –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –≤—ã—Å–ª–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞.")


# -------------–ó–∞—â–∏—Ç–∞ –æ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –Ω–∏–∫–æ–º—É –Ω–µ –ø—Ä–∏–¥—É—Ç--------------
@dp.message_handler(content_types=types.ContentTypes.TEXT, is_reply=False,
                    chat_id=[BRANDS.get("xiaomi"), BRANDS.get("samsung"), BRANDS.get("restore")],
                    )
async def message_in_chat_admins(message: types.Message):
    await message.answer("–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")


# -------------–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–¥–∞–≤—Ü—É--------------
@dp.message_handler(content_types=types.ContentTypes.TEXT, is_reply=True,
                    chat_id=[BRANDS.get("xiaomi"), BRANDS.get("samsung"), BRANDS.get("restore")],
                    )
async def reply_to_user(message: types.Message):
    if message.from_user.id == message.reply_to_message.from_user.id:
        await message.answer("–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç, –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ "
                             "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    if message.reply_to_message.text:
        match = re.search(r'id\((\d+)\)', message.reply_to_message.text)
        admin_message = message.text
        if match:
            await bot.send_message(match.group(1), f"–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {message.chat.title}\n{admin_message}")
        else:
            await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.")
    # –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ
    elif message.reply_to_message.caption:
        match = re.search(r'id\((\d+)\)', message.reply_to_message.caption)
        admin_message = message.text
        if match:
            await bot.send_message(match.group(1), f"–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {message.chat.title}\n{admin_message}")
        else:
            current_message = message.reply_to_message.message_id
            cur.execute("SELECT user_id FROM files WHERE message_id = ?", (current_message,))
            result = cur.fetchone()
            admin_message = message.text
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if result:
                user_id = result[0]
                await bot.send_message(user_id, f"–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {message.chat.title}\n{admin_message}")
            elif result is None:
                await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.")


# -------------–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º--------------
@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def reply_to_manager(message: types.Message):
    user_id = message.from_user.id
    print(message.chat.id)
    cur.execute("SELECT chat FROM curent_chat WHERE user_id = ?", (user_id,))
    result = cur.fetchone()

    user_message = message.text
    if result:
        current_chat = result[0]
        await bot.send_message(current_chat,
                               f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç id({message.from_user.id}) {message.from_user.first_name}:\n{user_message}")
    else:
        await message.answer("–ß—Ç–æ–±—ã –æ–±—â–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º, –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –≤—ã—Å–ª–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞.")


if __name__ == '__main__':
    executor.start_polling(dp)
